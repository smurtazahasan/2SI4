/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab1and2;
import java.util.Random;
import java.lang.Math;
/**
 *
 * @author Murtaza Hasan
 */
public class HugeInteger {
    
    private int size;
    private int[] number;
    private int[] numCopy;
    private boolean neg;
    private boolean negCopy;
    
    public HugeInteger(String val){
        
        size = val.length();
        
        number = new int[size];
        
        char c;
        int k = 0;
        
        for(int i = size-1; i >= 0; i--){
            
            c = val.charAt(i);
            
            number[k] = Character.getNumericValue(c);
            
            k++;
        }
        
        if(number[size-1] < 0){
            
            neg = true;
            number[size-1] = 0;
            
        }
        
        numCopy = number;
        negCopy = neg;
                
    }
    
    public HugeInteger(int n){
        
        Random rand = new Random();
        
        number = new int[n];
        
        for(int i = 0; i < n; i++){
            
            if(i == n-1){
                
               number[i] = rand.nextInt(8)+1;
                
            }
            
            else{
                
               number[i] = rand.nextInt(9); 
                
            }
            
        }
        
        size = n;
        
        numCopy = number;
        negCopy = neg;
        
    }
    
    public HugeInteger(int[] arr, boolean n){
        
        number = arr;
        size = arr.length;
        neg = n;
        
        numCopy = number;
        negCopy = neg;
    }
    
    public int getSize(){
        
        return size;
    }
    
    public int[] getNumber(){
        
        return number;
        
    }
    
    public boolean getNeg(){
        
        return neg;
        
    }
    
    public void setNeg(boolean n){
        
        neg = n;
        
    }
       
    public HugeInteger add(HugeInteger h){
        
        boolean s = false;
        boolean n = false;
        int[] copy;
        int len = 0;
        int comp;
        comp = magnitude(h);
        
        //determines if the arrays are the same size or not
        //if not the smaller one is transferred to an array of the same size as the larger one
        //if this array is smaller then s will be true
        //if this array is bigger then s will be false
        
        //this array is smaller, therefore the copy array is this number
        if(h.getSize() > size){
            
            copy = deepZeroCopy(h.getSize());
            s = true;
        }
        
        //this array is bigger, therefore the copy array is the inputted number
        else{
            
            copy = h.deepZeroCopy(size);
            s = false;
        }
             
        //if h is negative and this number is positive
        
        if(h.getNeg() == true && neg == false){
            
            if(comp == 1){
                
                n = getNeg();

            }
            
            else if(comp == -1){
                
                n = h.getNeg();
            }
            
            h.setNeg(false);
            setNeg(false);
            
            return subtract(h);
            
        }
        
        //if this number is negative and h is positive
        
        if(neg == true && h.getNeg() == false){
            
            if(comp == 1){
                
                n = getNeg();
                
                
            }
            
            else if(comp == -1){
                
                n = h.getNeg();
                
            }
            h.setNeg(false);
            setNeg(false);
            
            return h.subtract(this);
            
        }
        
        //if both numbers are negative
        if(neg == true && h.getNeg() == true){
            
            n = true;
            
        }
        
        int rem = 0;
        int num = 0;
        
        int[] out = new int[copy.length + 1];
        
        //if this array was resized
        if(s == true){
            
          for(int i = 0; i < copy.length; i++){
              
            out[i] = copy[i] + h.getNumber()[i] + rem;
              
            rem = 0;
              
            if(out[i] >= 10 && i < copy.length -1){
                  
                num = out[i];
                out[i] = num % 10;
                rem = num/10;
                  
            } 
          }
          
          if(out[copy.length - 1] >=10){
              
              num = out[copy.length - 1];
              out[copy.length - 1] = num % 10;
              rem = num/10;
              out[copy.length] = rem;
              
          }
          
        }
        
        //if inputted array was resized
        else if(s == false){
            
            for(int i = 0; i < copy.length; i++){ 
           
                out[i] = copy[i] + number[i] + rem;
            
                if(out[i] >= 10 && i < copy.length -1){
                   
                    num = out[i];
                    out[i] = num % 10;
                    rem = num/10;
                    System.out.println(rem); 
                
                }
            }
          
            if(out[copy.length-1] >=10){
              
                num = out[copy.length-1];
                out[copy.length-1] = num % 10;
                rem = num/10;
                out[copy.length] = rem;
              
            }
          
        }
        

        HugeInteger output = new HugeInteger(out, n);
        
        number = numCopy;
        neg = negCopy;
        
        return output;
        
    }
    
    public HugeInteger subtract(HugeInteger h){
        
        boolean s;
        int[] copy;
        int comp;
        int mag;
        comp = compareTo(h);
        mag = magnitude(h);
        boolean n = false;
        
        
        //if this array is smaller, copy will be this array, s is true
        if(h.getSize() > size){
            
            copy = deepZeroCopy(h.getSize());
            s = true;
        }
        
        //if this array is bigger, copy will be inputted array, s is false
        else{
            
            copy = h.deepZeroCopy(size);
            s = false;
        }
                
        //if inputted number is negative and this number is positive
        if(h.getNeg() == true && neg == false){
            
            if(mag == 1){
               
                n = neg;
               
            }
            
            else if(mag == -1){
                
                n = h.getNeg();
                
            } 
            h.setNeg(false);
            setNeg(false);
            return add(h);
            
        }
        
        
        //if inputted number is positive and this number is negative
        else if(h.getNeg() == false && neg == true){
            
            
            if(mag == 1){
                
                n = neg; 
                
            }
            
            else if(mag == -1){
                
                n = h.getNeg();
                
            }
            
            h.setNeg(false);
            setNeg(false);
            return h.add(this);
            
        }
        
        //if both numbers are negative
        else if(h.getNeg() == true && neg == true){
            
            h.setNeg(false);
            return add(h);
            
        }
        
        int[] out = new int[copy.length + 1];
        
        
        //if this is a bigger number than inputted number
        if(comp == 1){
            
            //if this array was resized
            if(s){
            
                for(int i = 0; i <= copy.length; i++){
               
                    out[i] = copy[i] - h.getNumber()[i];
                
                    if(out[i] < 0){
                    
                        if(i+1 < size){
                            
                            out[i] = out[i] + 10;
                            
                            copy[i+1] = copy[i+1] - 1;
                        
                        }
                    
                    }
            
                }
            
            }
            
            //if inputted array was resized
            else if(s == false){
            
                for(int i = 0; i < copy.length; i++){
                
                    out[i] = number[i] - copy[i];
                
                    if(out[i] < 0){
                    
                        if(i+1 < size){
                        
                            out[i] = out[i] + 10;
                       
                            number[i+1] = number[i+1] - 1;
                    
                        }
                    
                    }
                
                }
            
            }
        }
        
        //if inputted number is bigger than this number
        if(comp == -1){
            
            //if this array was resized
            if(s){
            
                for(int i = 0; i < copy.length; i++){
               
                    out[i] = h.getNumber()[i] - copy[i];
                
                    if(out[i] < 0){
                    
                        if(i+1 < copy.length){
                            out[i] = out[i] + 10;
                            h.getNumber()[i+1] = h.getNumber()[i+1] - 1;
                        }
                    
                    }
            
                }
                
                n = true;
            
            }

            //if inputted array was resized
            else if(s == false){
            
                for(int i = 0; i < copy.length; i++){
                
                    out[i] = copy[i] - number[i];
                
                        if(out[i] < 0){
                    
                            if(i+1 < copy.length){
                            
                            out[i] = out[i] + 10;
                            copy[i+1] = copy[i+1] - 1;
                            
                            }
                                                
                        }
                
                }
                
                n = true;
            
            }
            
        }

        HugeInteger output = new HugeInteger(out,n);
        
        number = numCopy;
        neg = negCopy;
        
        return output;
        
    }
    
    
    public HugeInteger multiply(HugeInteger h){
    
        boolean t;
        int max;
        
        if(h.getSize() > size){
           
            max = h.getSize();
            t = true;
        }
        
        else{
                     
            max = size;
            t = false;
            
        }
        
        boolean n; 
        
        if((neg == true && h.getNeg() == true) || (neg == false && h.getNeg() == false)){
            
            n = false;
            
        }
        
        else{
            
            n = true;
            
        }
        int s = max*max +1;                
        int[] prod = new int[s];
        int[] sum = new int[max + max];

        
        if(t){
            
            for(int i = 0; i<number.length; i++){
            
                for(int j = 0; j < h.getSize(); j++){
                    
                    sum[i+j] = sum[i+j] + number[i] * h.getNumber()[j];

                }
            
            }
         
        }
        
        else{
            
            for(int j = 0; j < h.getSize(); j++){
                
                for(int i = 0; i < number.length;  i++){
                    
                    sum[i+j] = sum[i+j] + h.getNumber()[j] * number[i];
                    
                }

            }
               
        }

        int carry;
        int num;
        
        for(int f = 0; f < sum.length; f++){
            
            prod[f] = sum[f];
            
        }
        
        for(int d = 0; d < sum.length; d++){
                
                num = prod[d]%10;
                carry = prod[d]/10;
                prod[d] = num;
                
                if((d+1) < prod.length){
                    
                    prod[d+1] = carry + prod[d+1];
                
                }

        }
        
        
        HugeInteger output = new HugeInteger(prod, n);
        
        return output;

    }
    
    public HugeInteger divide(HugeInteger h) throws IllegalArgumentException{
        
        int[] quotient;
        boolean n;
        int max;
        
        HugeInteger b = new HugeInteger("0");

        
        if(h.compareTo(b) == 0){
            
            throw new IllegalArgumentException("Invalid divisor.");
            
        }
        
        if(h.getNumber().length > number.length){
            
            max = h.getNumber().length;
            
        }
        else{
            
            max = number.length;
        }
                
        if(h.getNeg() == true && neg == false || h.getNeg() == false && neg == true){
            
            n = true;
            
        }
        
        else{
            
            n = false;
             
        }
              
        
        if(this.magnitude(h) == -1){
            
            quotient = new int[] {0};
            HugeInteger output = new HugeInteger(quotient, n);
            
            
        }
        
        int out = 0;
        int[] arr = new int[number.length];
        
        for(int j = 0; j < number.length; j++){
            
            arr[j] = number[j];
            
        }
        
        HugeInteger g = new HugeInteger(arr, false);
        
        max = (int)Math.pow(10, max);
             
        
        for(int i = 0; i < max; i++){
            

            if(g.magnitude(h) == 0){
                
                out = i+1;

                break;
                
            }
            
            if(g.magnitude(h) == -1){
                
                out = i;

                break;
                
            }

            g = g.subtract(h);
            
        }
        
        String o = Integer.toString(out);
        
        if(n == true){
            
            o = "-" + out;
            
        }
         
        HugeInteger output = new HugeInteger(o);

        
        
        return output;
        
    }

    
    public int magnitude(HugeInteger h){
        //returns -1 if inputted number is bigger in magnitude than this number
        //returns 1 if inputted number is smaller in magnitude than this number
        //returns 0 if they're the same magnitude
        
        
        int[] copy;
        boolean s;
        int out = 0;
        
        if(h.getSize() > size){
            
            copy = deepZeroCopy(h.getSize());
            s = true;
        }
        
        else{
            
            copy = h.deepZeroCopy(size);
            s = false;
        }
        
        if(s){
                
            for(int i = copy.length-1; i >= 0; i--){
                
                    if(h.getNumber()[i] > copy[i]){

                        out = -1;    
                        break;
                    }
                
                    if(copy[i] > h.getNumber()[i]){
                        out = 1;
                        break;
                    }
                            
                    else
                        out = 0;
                            
            }            
               
        }
        
        else if(s == false){
            
            for(int i = copy.length -1 ; i >=0; i--){
                
                    if(copy[i] > number[i]){
                    
                        out = -1;
                        break;
                    
                    }
                
                    if(number[i] > copy[i]){
                    
                        out = 1;
                        break;
                    
                    }
                
                    else
                        out = 0;
                    }
            
        }
        
        return out;
    }
    
    public int compareTo(HugeInteger h){
        //returns 1 if this is a bigger number than inputted number
        //returns -1 if this is a smaller number than inputted number
        //returns 0 if they're the same 
        
        int[] copy;
        boolean s;
        int out = 0;
        
        if(h.getSize() > size){
            
            copy = deepZeroCopy(h.getSize());
            s = true;
        }
        
        else{
            
            copy = h.deepZeroCopy(size);
            s = false;
        }
        
        if(s){
            
            if(h.getNeg() == true && neg == false){
                
                out = 1;
                
                
            }
            
            else if(h.getNeg() == false && neg == true){
                
                out = -1;
                
            }
            
            else if(h.getNeg() == true && neg == true){
                
                for(int i = copy.length -1; i >= 0; i--){
                
                    if(h.getNumber()[i] > copy[i]){
                        out = 1;    
                        break;
                    }
                
                    if(copy[i] > h.getNumber()[i]){
                        out = -1;
                        break;
                    }
                            
                    else
                        out = 0;
                            
                }                
               
            }
            
            else{
                
                for(int i = copy.length-1; i >= 0; i--){
                
                    if(h.getNumber()[i] > copy[i]){

                        out = -1;    
                        break;
                    }
                
                    if(copy[i] > h.getNumber()[i]){
                        out = 1;
                        break;
                    }
                            
                    else
                        out = 0;
                            
                }
            }
        }
        
        else if(s==false){
            
            if(h.getNeg() == true && neg == false){
                
                out = 1;
                
            }
            
            else if(h.getNeg() == false && neg == true){
                
                out = -1;
                
            }
            
            else if(h.getNeg() == true && neg == true){
                
                for(int i = copy.length - 1; i >=0; i--){
                
                    if(copy[i] > number[i]){
                    
                        out = 1;
                        break;
                    
                    }
                
                    if(number[i] > copy[i]){
                    
                        out = -1;
                        break;
                    
                    }
                
                    else
                        out = 0;
                    }                
                
                
            }
            
            else{
                
                for(int i = copy.length - 1; i >=0; i--){
                
                    if(copy[i] > number[i]){
                    
                        out = -1;
                        break;
                    
                    }
                
                    if(number[i] > copy[i]){
                    
                        out = 1;
                        break;
                    
                    }
                
                    else
                        out = 0;
                    }
            }
            
        }   
        
        return out;
    }
    
    public int[] deepZeroCopy(int n){
    
        int[] copy = new int[n];
        
        for(int i = 0; i < n; i++){
            
            if(i < size)
                copy[i] = number[i];
            else
                copy[i] = 0;
            
        }
    
        return copy;
    }
    
    public String toString(){
        
        boolean zeros = false;
        String out = "";
                       
        if(neg){
         
            out = out + "-";
            
            for(int i = size-2; i >= 0; i--){
                
                if(number[i] == 0 && zeros ==false){                
                    
                    if(i == 0){
                        
                        out = out + "0";
                        
                    }
                                            
                }
                
                else{
                    
                    zeros = true;
                    out = out + number[i];
                }
            
            }
            
        }
        
        else{
                      
            for(int i = size-1; i >= 0; i--){
            
                if(number[i] == 0 && zeros ==false){                
                    
                    if(i == 0){
                        
                        out = out + "0";
                        
                    }
                    
                }
                
                else{
                    
                    zeros = true;
                    out = out + number[i];
                }
            
            }
            
        }
        
        return out;
    }
        
}
